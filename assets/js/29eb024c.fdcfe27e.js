"use strict";(self.webpackChunksurge_docs=self.webpackChunksurge_docs||[]).push([[508],{8390:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>i,toc:()=>d});const i=JSON.parse('{"id":"guides/running-surge/provers/index","title":"Set up a Prover","description":"You can skip deploying provers in a local devnet if you only want to test basic transaction flow and block proposals. However, because Surge uses a 2-of-3 multi-prover security model, without at least two provers running:","source":"@site/docs/guides/running-surge/provers/index.mdx","sourceDirName":"guides/running-surge/provers","slug":"/guides/running-surge/provers/","permalink":"/docs/guides/running-surge/provers/","draft":false,"unlisted":false,"editUrl":"https://github.com/NethermindEth/surge-docs/tree/main/docs/guides/running-surge/provers/index.mdx","tags":[],"version":"current","lastUpdatedAt":1744017925000,"sidebarPosition":4,"frontMatter":{"title":"Set up a Prover","sidebar_position":4},"sidebar":"tutorialSidebar","previous":{"title":"Prepare L2 Genesis","permalink":"/docs/guides/running-surge/prepare-l2-genesis"},"next":{"title":"Deploy SGX Prover","permalink":"/docs/guides/running-surge/provers/sgx-prover"}}');var s=n(4848),o=n(8453);const t={title:"Set up a Prover",sidebar_position:4},a="Set up a Prover",l={},d=[{value:"Understanding Provers in Surge",id:"understanding-provers-in-surge",level:2},{value:"What is a Prover?",id:"what-is-a-prover",level:3},{value:"Why Do You Need Provers?",id:"why-do-you-need-provers",level:3},{value:"How Do Provers Work?",id:"how-do-provers-work",level:3},{value:"Required Provers for Surge",id:"required-provers-for-surge",level:2}];function c(e){const r={a:"a",admonition:"admonition",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"set-up-a-prover",children:"Set up a Prover"})}),"\n",(0,s.jsxs)(r.admonition,{type:"note",children:[(0,s.jsxs)(r.p,{children:["You ",(0,s.jsx)(r.strong,{children:"can"})," skip deploying provers in a local devnet if you only want to test basic transaction flow and block proposals. However, because Surge uses a ",(0,s.jsx)(r.strong,{children:"2-of-3 multi-prover security model"}),", without ",(0,s.jsx)(r.strong,{children:"at least two"})," provers running:"]}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"No L2 blocks will ever be proven or finalized on-chain."}),"\n",(0,s.jsx)(r.li,{children:"Any actions requiring finalized state (e.g., bridging back to L1, claiming certain rewards) will remain pending or unavailable."}),"\n"]}),(0,s.jsx)(r.p,{children:"Deploying a prover can be challenging due to:"}),(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Hardware Requirements"}),": Certain provers (e.g., SGX) require specialized hardware or secure enclaves."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"Complex Setup"}),": Installing and configuring toolchains, drivers, or required libraries can be time-consuming."]}),"\n"]})]}),"\n",(0,s.jsx)(r.p,{children:"In a based rollup like Surge, provers generate cryptographic proofs verifying L2 blocks proposed by proposers. These proofs are then submitted on-chain through a prover-relayer, marking blocks as verified (finalized)."}),"\n",(0,s.jsx)(r.p,{children:"Without provers submitting proofs, blocks remain unverified, limiting critical functionalities such as cross-chain finalizations."}),"\n",(0,s.jsxs)(r.p,{children:["To see how provers fit into the overall system, refer to the ",(0,s.jsx)(r.a,{href:"/docs/about/architecture",children:"Surge Architecture documentation"}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"understanding-provers-in-surge",children:"Understanding Provers in Surge"}),"\n",(0,s.jsx)(r.h3,{id:"what-is-a-prover",children:"What is a Prover?"}),"\n",(0,s.jsx)(r.p,{children:"A prover is a component responsible for generating cryptographic proofs that validate the correctness and integrity of Layer 2 transactions and blocks. Surge leverages multiple provers\u2014three independent ones in total\u2014to ensure the security and reliability of rollup chains."}),"\n",(0,s.jsx)(r.h3,{id:"why-do-you-need-provers",children:"Why Do You Need Provers?"}),"\n",(0,s.jsx)(r.p,{children:"Provers are essential because:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"They guarantee that only valid transactions and blocks are finalized on-chain."}),"\n",(0,s.jsx)(r.li,{children:"They enable trustless, secure interactions between Layer 2 and Layer 1, facilitating safe bridging and asset transfers."}),"\n",(0,s.jsx)(r.li,{children:"They maintain the integrity and finality of the blockchain, preventing invalid or fraudulent state transitions."}),"\n",(0,s.jsxs)(r.li,{children:["Surge's ",(0,s.jsx)(r.strong,{children:"2-of-3 model"})," means that having two of these provers independently confirm a block is sufficient to finalize it on-chain."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"how-do-provers-work",children:"How Do Provers Work?"}),"\n",(0,s.jsx)(r.p,{children:"Provers execute computationally intensive algorithms to create succinct proofs that validate batches of L2 transactions. Once generated, these proofs are submitted on-chain via a prover-relayer, which then finalizes and confirms the validity of these transactions on the blockchain\u2014provided at least two of the three available provers agree on the block."}),"\n",(0,s.jsx)(r.h2,{id:"required-provers-for-surge",children:"Required Provers for Surge"}),"\n",(0,s.jsx)(r.p,{children:"Surge supports three provers in production scenarios:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/docs/guides/running-surge/provers/sgx-prover",children:"SGX Prover"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/docs/guides/running-surge/provers/risc0-prover",children:"RISC0 Prover"})}),"\n",(0,s.jsx)(r.li,{children:(0,s.jsx)(r.a,{href:"/docs/guides/running-surge/provers/sp1-prover",children:"SP1 Prover"})}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Although you only need ",(0,s.jsx)(r.strong,{children:"two"})," of these provers to finalize blocks under Surge\u2019s 2-of-3 security model, you may choose to run all three for maximum redundancy and security. Each prover has distinct setup and operational requirements. Follow the respective guides carefully to properly configure, deploy, and maintain each prover."]})]})}function u(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>a});var i=n(6540);const s={},o=i.createContext(s);function t(e){const r=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),i.createElement(o.Provider,{value:r},e.children)}}}]);