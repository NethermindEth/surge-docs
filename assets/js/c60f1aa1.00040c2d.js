"use strict";(self.webpackChunksurge_docs=self.webpackChunksurge_docs||[]).push([[934],{7469:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>a});var i=s(4848),r=s(8453);const t={sidebar_position:1},o="Bridging",d={id:"core-concepts/bridging",title:"Bridging",description:"Surge uses Taiko's secure bridging infrastructure to enable cross-chain asset transfers between Ethereum L1 and Surge. This documentation provides an overview of how bridging works in Surge.",source:"@site/docs/core-concepts/bridging.mdx",sourceDirName:"core-concepts",slug:"/core-concepts/bridging",permalink:"/docs/core-concepts/bridging",draft:!1,unlisted:!1,editUrl:"https://github.com/NethermindEth/surge/tree/main/docs/docs/core-concepts/bridging.mdx",tags:[],version:"current",lastUpdatedAt:1735121442e3,sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Core Concepts",permalink:"/docs/core-concepts/"},next:{title:"Prover Setup",permalink:"/docs/core-concepts/proposing"}},c={},a=[{value:"Overview",id:"overview",level:2},{value:"How It Works",id:"how-it-works",level:2},{value:"Supported Assets",id:"supported-assets",level:2},{value:"Security Model",id:"security-model",level:2},{value:"Deep Dive",id:"deep-dive",level:2}];function l(e){const n={a:"a",admonition:"admonition",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"bridging",children:"Bridging"})}),"\n",(0,i.jsx)(n.p,{children:"Surge uses Taiko's secure bridging infrastructure to enable cross-chain asset transfers between Ethereum L1 and Surge. This documentation provides an overview of how bridging works in Surge."}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The bridge enables users to transfer ETH and tokens (ERC-20, ERC-721, ERC-1155) between Ethereum and Surge. It leverages Taiko's battle-tested bridge implementation, which uses a secure cross-chain messaging system based on merkle proofs."}),"\n",(0,i.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,i.jsx)(n.p,{children:"The bridging process follows these key steps:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Message Sending"}),": When you initiate a bridge transfer, your assets are locked in a bridge contract on the source chain, and a message is sent through a Signal Service."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Proof Generation"}),": The system generates a merkle proof that verifies your message was properly recorded on the source chain."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Message Processing"}),": On the destination chain, the proof is verified, and your assets are released or minted accordingly."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"supported-assets",children:"Supported Assets"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"ETH"}),"\n",(0,i.jsx)(n.li,{children:"ERC-20 tokens"}),"\n",(0,i.jsx)(n.li,{children:"ERC-721 tokens (NFTs)"}),"\n",(0,i.jsx)(n.li,{children:"ERC-1155 tokens"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"security-model",children:"Security Model"}),"\n",(0,i.jsx)(n.p,{children:"The bridge's security is based on:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Merkle proof verification"}),"\n",(0,i.jsx)(n.li,{children:"Cross-chain state root synchronization"}),"\n",(0,i.jsx)(n.li,{children:"Smart contract-based message verification"}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"deep-dive",children:"Deep Dive"}),"\n",(0,i.jsx)(n.p,{children:"For a comprehensive understanding of the bridging mechanics, including:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Detailed message flow"}),"\n",(0,i.jsx)(n.li,{children:"Signal Service implementation"}),"\n",(0,i.jsx)(n.li,{children:"Cross-chain proof verification"}),"\n",(0,i.jsx)(n.li,{children:"Token vault system"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Please refer to the ",(0,i.jsx)(n.a,{href:"https://docs.taiko.xyz/concepts/bridging",children:"Taiko Bridge Documentation"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsx)(n.p,{children:"Always verify transaction details and recipient addresses when bridging assets. While the bridge protocol is secure, user errors cannot be reversed."})}),"\n",(0,i.jsx)(n.admonition,{type:"note",children:(0,i.jsx)(n.p,{children:"The bridge UI and contract addresses will be provided once the network is live."})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>d});var i=s(6540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);