"use strict";(self.webpackChunksurge_docs=self.webpackChunksurge_docs||[]).push([[971],{4978:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"guides/surge-on-hoodi/run-l2","title":"Run L2","description":"This guide is fairly similar to the Deploy L2 guide. The main difference is that this guide is focused on running the components of the Surge rollup on the Hoodi testnet, while the other one is more general.","source":"@site/docs/guides/surge-on-hoodi/run-l2.mdx","sourceDirName":"guides/surge-on-hoodi","slug":"/guides/surge-on-hoodi/run-l2","permalink":"/docs/guides/surge-on-hoodi/run-l2","draft":false,"unlisted":false,"editUrl":"https://github.com/NethermindEth/surge-docs/tree/main/docs/guides/surge-on-hoodi/run-l2.mdx","tags":[],"version":"current","lastUpdatedAt":1761835737000,"sidebarPosition":3,"frontMatter":{"title":"Run L2","sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Set Up a Prover","permalink":"/docs/guides/surge-on-hoodi/provers"},"next":{"title":"Run your own Surge Devnet","permalink":"/docs/guides/running-surge/"}}');var t=r(4848),s=r(8453),i=r(1470),a=r(9365);const l={title:"Run L2",sidebar_position:3},c="Run L2",d={},h=[{value:"Setup Process",id:"setup-process",level:2},{value:"1. Clone Repository",id:"1-clone-repository",level:3},{value:"2. Start Components",id:"2-start-components",level:3},{value:"1. Configure Environment",id:"1-configure-environment",level:4},{value:"2. Start Docker Compose Components",id:"2-start-docker-compose-components",level:4},{value:"Create Docker Network",id:"create-docker-network",level:4},{value:"Driver",id:"driver",level:4},{value:"Proposer",id:"proposer",level:4},{value:"Prover Relayer",id:"prover-relayer",level:4},{value:"Start Script",id:"start-script",level:4},{value:"Stack Components",id:"stack-components",level:4},{value:"Relayer and Bridge UI",id:"relayer-and-bridge-ui",level:4},{value:"Regarding P2P Synchronization",id:"regarding-p2p-synchronization",level:2},{value:"Two Synchronization Methods",id:"two-synchronization-methods",level:3},{value:"Key Terminology",id:"key-terminology",level:3},{value:"Configuration Variables",id:"configuration-variables",level:3},{value:"When to Use P2P Sync",id:"when-to-use-p2p-sync",level:3},{value:"Verification",id:"verification",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2}];function u(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"run-l2",children:"Run L2"})}),"\n",(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsxs)(n.p,{children:["This guide is fairly similar to the ",(0,t.jsx)(n.a,{href:"/docs/guides/running-surge/deploy-l2",children:"Deploy L2"})," guide. The main difference is that this guide is focused on running the components of the Surge rollup on the Hoodi testnet, while the other one is more general."]})}),"\n",(0,t.jsx)(n.p,{children:"A Layer 2 network builds on top of Layer 1 to increase scalability and reduce transaction costs, while still inheriting L1\u2019s security. For Surge, the L2 network is where user transactions are executed and blocks are proposed and proven."}),"\n",(0,t.jsxs)(n.p,{children:["This guide provides clear instructions for running Surge\u2019s L2 components using the ",(0,t.jsx)(n.a,{href:"https://github.com/NethermindEth/simple-surge-node",children:"Simple Surge Node"}),", enabling you to run and test the core rollup logic."]}),"\n",(0,t.jsxs)(n.p,{children:["To see how L2 fits into the overall system, refer to the ",(0,t.jsx)(n.a,{href:"/docs/about/architecture",children:"Surge Architecture documentation"}),"."]}),"\n",(0,t.jsx)(n.h2,{id:"setup-process",children:"Setup Process"}),"\n",(0,t.jsx)(n.p,{children:"Follow these steps to set up and run your L2 network:"}),"\n",(0,t.jsx)(n.h3,{id:"1-clone-repository",children:"1. Clone Repository"}),"\n",(0,t.jsxs)(n.p,{children:["Clone the ",(0,t.jsx)(n.a,{href:"https://github.com/NethermindEth/simple-surge-node",children:"Simple Surge Node"})," repository and navigate into the directory:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/NethermindEth/simple-surge-node.git\ncd simple-surge-node\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-start-components",children:"2. Start Components"}),"\n",(0,t.jsx)(n.p,{children:"You have two options to start the L2 components:"}),"\n",(0,t.jsxs)(i.A,{children:[(0,t.jsxs)(a.A,{value:"docker",label:"Option A: Docker Compose (Simpler)",default:!0,children:[(0,t.jsxs)(n.p,{children:["This is the recommended approach for most users. First, you need to configure the ",(0,t.jsx)(n.code,{children:".env"})," file."]}),(0,t.jsx)(n.h4,{id:"1-configure-environment",children:"1. Configure Environment"}),(0,t.jsxs)(n.p,{children:["Create your environment configuration file (",(0,t.jsx)(n.code,{children:".env"}),") by copying the provided sample:"]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"cp .env.hoodi .env\n"})}),(0,t.jsxs)(n.admonition,{title:"Environment Configuration",type:"tip",children:[(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:".env.hoodi"})," file contains default configuration values for Hoodi. You can customize these settings \u2014 such as L1 and L2 parameters, genesis hashes, and contract addresses \u2014 as needed."]}),(0,t.jsx)(n.p,{children:"And make sure to update the L1 URLs to match the ones you're using."})]}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"host.docker.internal"})," values in the ",(0,t.jsx)(n.code,{children:".env"})," file might not work in all environments. If you encounter issues, replace ",(0,t.jsx)(n.code,{children:"host.docker.internal"})," with your server's IP address or hostname."]})}),(0,t.jsx)(n.h4,{id:"2-start-docker-compose-components",children:"2. Start Docker Compose Components"}),(0,t.jsx)(n.p,{children:"L2 consists of the following components below, launch the ones specific to your needs."}),(0,t.jsxs)(n.admonition,{type:"tip",children:[(0,t.jsx)(n.p,{children:"You can run multiple profiles at once:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker compose --profile <profile1> --profile <profile2> up -d\n"})})]}),(0,t.jsx)(n.h4,{id:"create-docker-network",children:"Create Docker Network"}),(0,t.jsx)(n.p,{children:"Before starting any components, create the required Docker network:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker network create surge-network\n"})}),(0,t.jsx)(n.h4,{id:"driver",children:"Driver"}),(0,t.jsx)(n.admonition,{type:"tip",children:(0,t.jsx)(n.p,{children:"If you just want to follow the L2 chain, launching just the driver is sufficient."})}),(0,t.jsx)(n.p,{children:"Starts the Driver + Nethermind Execution Client for L2 network operation:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker compose --profile driver up -d\n"})}),(0,t.jsx)(n.h4,{id:"proposer",children:"Proposer"}),(0,t.jsx)(n.p,{children:"Initiates the Proposer service for transaction bundling and block proposals:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker compose --profile proposer up -d\n"})}),(0,t.jsx)(n.h4,{id:"prover-relayer",children:"Prover Relayer"}),(0,t.jsx)(n.admonition,{type:"note",children:(0,t.jsx)(n.p,{children:"If you did not deploy a prover in the previous setup steps, you can safely skip launching the prover relayer."})}),(0,t.jsx)(n.p,{children:"Launches the Prover Relayer for proof relay:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"docker compose --profile prover up -d\n"})})]}),(0,t.jsxs)(a.A,{value:"script",label:"Option B: Shell Script",children:[(0,t.jsx)(n.p,{children:"Use the provided shell script for an interactive setup experience."}),(0,t.jsx)(n.h4,{id:"start-script",children:"Start Script"}),(0,t.jsx)(n.p,{children:"Start the script for running Surge stack components:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"./surge-stack-deployer.sh\n"})}),(0,t.jsxs)(n.p,{children:["You'll see the same prompts as in the ",(0,t.jsx)(n.a,{href:"/docs/guides/running-surge/deploy-l2#3-start-protocol-deployment-script",children:"3. Start Protocol Deployment Script section"}),".\nSet the same values as before to ensure the script uses the correct configuration."]}),(0,t.jsx)(n.h4,{id:"stack-components",children:"Stack Components"}),(0,t.jsx)(n.p,{children:"The script will ask you which components you want to run:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 Enter L2 stack option:                                       \u2551\n\u2551 1 for driver only                                            \u2551\n\u2551 2 for driver + proposer                                      \u2551\n\u2551 3 for driver + proposer + spammer                            \u2551\n\u2551 4 for driver + proposer + prover + spammer                   \u2551\n\u2551 5 for all except spammer                                     \u2551\n\u2551 [default: all]                                               \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Driver"})," - Starts the Nethermind Execution Client for L2 network operation"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Proposer"})," - Initiates the Proposer service for transaction bundling and block proposals"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Prover"})," - Starts the Prover Relayer for proof relay, this component requests proofs from your provers and submits them on-chain"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Spammer"})," - Launches a transaction spammer to generate load on the L2 network for testing purposes"]}),"\n"]}),(0,t.jsxs)(n.p,{children:["Choose the option that best fits your testing or running needs. For a full setup, select option ",(0,t.jsx)(n.code,{children:"5"})," to run all components except the spammer."]}),(0,t.jsx)(n.h4,{id:"relayer-and-bridge-ui",children:"Relayer and Bridge UI"}),(0,t.jsx)(n.p,{children:"The script will ask you:"}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2557\n\u2551 Start relayers? (true/false) [default: true]                 \u2551\n\u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u255d\n"})}),(0,t.jsx)(n.p,{children:"In this step the script starts the relayer for L1 and L2 communication, along with several other components like Bridge UI and BlockScout."}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Bridge UI"}),": The user-facing interface for transferring assets between Layer 1 and Layer 2, enabling seamless interaction with Surge's cross-chain functionality."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Relayer"}),": Facilitates cross-layer communication between Layer 1 and Layer 2, such as submitting proofs or syncing finalized state."]}),(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"BlockScout"}),": Provides a web-based interface to explore blocks, transactions, accounts, verify smart contracts, and monitor network activity."]})]})]}),"\n",(0,t.jsx)(n.h2,{id:"regarding-p2p-synchronization",children:"Regarding P2P Synchronization"}),"\n",(0,t.jsxs)(n.p,{children:["A bare-minimum Surge L2 node consists of two components: the ",(0,t.jsx)(n.strong,{children:"Driver"})," (from taiko-client) and an ",(0,t.jsx)(n.strong,{children:"Execution Client"})," (Nethermind in our case). When launching a node for the first time, you have two options to build the chain state:"]}),"\n",(0,t.jsx)(n.h3,{id:"two-synchronization-methods",children:"Two Synchronization Methods"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"1. Manual Sync via L1"})}),"\n",(0,t.jsxs)(n.p,{children:["The driver iterates through all blocks from the L1 origin of L2 genesis to the latest L1 head, fetching ",(0,t.jsx)(n.code,{children:"BatchProposed"})," events and blob sidecars (if present), then inserts blocks into the execution client one by one."]}),"\n",(0,t.jsx)(n.p,{children:"This approach becomes problematic on mature chains because older L2 blobs may have already been pruned from the L1 beacon node (typically after ~18 days). To work around this, you would need either:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"An archive L1 node that preserves all historical blobs in its consensus layer"}),"\n",(0,t.jsx)(n.li,{children:"A blob storage service (such as BlobScan) configured in the driver"}),"\n",(0,t.jsx)(n.li,{children:"P2P sync instead (recommended)"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"2. P2P Sync (Recommended)"})}),"\n",(0,t.jsx)(n.p,{children:"P2P synchronization allows your node to build its chain state by downloading blocks directly from peer nodes in the network, bypassing the blob pruning limitation. The driver triggers beacon synchronization by making RPC calls to the execution client, which then initiates P2P sync using the provided bootnodes."}),"\n",(0,t.jsx)(n.admonition,{title:"Surge Testnet Default",type:"tip",children:(0,t.jsxs)(n.p,{children:["For Surge Testnet (Hoodi), P2P sync is enabled by default in the ",(0,t.jsx)(n.code,{children:".env.hoodi"})," configuration file. We provide our own checkpoint sync URL and bootnode addresses, so your node can synchronize quickly without any additional configuration."]})}),"\n",(0,t.jsx)(n.h3,{id:"key-terminology",children:"Key Terminology"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Bootnode"}),": A specialized node that serves as an entry point for new nodes joining the network via P2P. Bootnodes maintain information about active peer nodes and help newcomers discover and connect to the network. When your node starts with P2P sync enabled, it contacts the bootnode to obtain a list of peers to synchronize with."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"Enode (Ethereum Node)"}),": A unique identifier for each node in the network, consisting of the node's public key and network address. It allows nodes to locate and establish connections with each other. An enode looks like:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"enode://[node-id]@[ip-address]:[port]\n"})}),"\n",(0,t.jsxs)(n.p,{children:["The bootnode's enode address is what you configure in the ",(0,t.jsx)(n.code,{children:"BOOT_NODES"})," environment variable."]}),"\n",(0,t.jsx)(n.h3,{id:"configuration-variables",children:"Configuration Variables"}),"\n",(0,t.jsx)(n.p,{children:"The simple-surge-node implementation provides these environment variables to control P2P synchronization:"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"ENABLE_P2P_SYNC"})}),": Set to ",(0,t.jsx)(n.code,{children:"true"})," to enable P2P synchronization or ",(0,t.jsx)(n.code,{children:"false"})," to disable it. When enabled, your node will connect to bootnodes and synchronize via P2P instead of fetching all data from L1."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"BOOT_NODES"})}),": Enode addresses of bootnode(s) that your node will connect to for P2P synchronization. For Surge Testnet, these are pre-configured in the ",(0,t.jsx)(n.code,{children:".env.hoodi"})," file."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"P2P_SYNC_URL"})}),": A valid L2 HTTP RPC URL used as a checkpoint for faster synchronization. This helps your node determine the target block height to sync to."]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"L2_NETWORK_DISCOVERY_PORT"})}),": The network port used for P2P communication and peer discovery."]}),"\n",(0,t.jsx)(n.h3,{id:"when-to-use-p2p-sync",children:"When to Use P2P Sync"}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Enable P2P sync (recommended) when:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Joining Surge Testnet or any established Surge network"}),"\n",(0,t.jsx)(n.li,{children:"The L1 beacon node has pruned older blobs (chains older than ~18 days)"}),"\n",(0,t.jsx)(n.li,{children:"You want faster synchronization by downloading blocks from existing peers"}),"\n",(0,t.jsx)(n.li,{children:"You don't have access to an archive L1 node or blob storage service"}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"Disable P2P sync only when:"})}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"You're setting up a completely new isolated network for development"}),"\n",(0,t.jsx)(n.li,{children:"You have a fresh chain where all blobs are still available on L1"}),"\n",(0,t.jsx)(n.li,{children:"You explicitly want to sync exclusively via L1 despite slower performance"}),"\n"]}),"\n",(0,t.jsx)(n.admonition,{title:"Network Requirements",type:"note",children:(0,t.jsxs)(n.p,{children:["If your node operates behind firewalls or NAT, ensure the P2P port specified in ",(0,t.jsx)(n.code,{children:"L2_NETWORK_DISCOVERY_PORT"})," is open and properly forwarded to allow peer connections. This enables your node to participate fully in the P2P network."]})}),"\n",(0,t.jsx)(n.h2,{id:"verification",children:"Verification"}),"\n",(0,t.jsx)(n.p,{children:"After launching all components, ensure everything is running correctly by:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Checking the status of Docker containers using ",(0,t.jsx)(n.code,{children:"docker compose ps"}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Monitoring logs for startup errors with ",(0,t.jsx)(n.code,{children:"docker compose --profile <profile_name> logs -f --tail 100"}),"."]}),"\n",(0,t.jsx)(n.li,{children:"Verifying network connectivity between components."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,t.jsx)(n.p,{children:"If issues arise during launch:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["Confirm environment variables in ",(0,t.jsx)(n.code,{children:".env"})," are correctly configured."]}),"\n",(0,t.jsx)(n.li,{children:"Review Docker logs for detailed error information."}),"\n",(0,t.jsx)(n.li,{children:"Ensure required ports are open and accessible."}),"\n",(0,t.jsx)(n.li,{children:"Check network connectivity between the launched components."}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},9365:(e,n,r)=>{r.d(n,{A:()=>i});r(6540);var o=r(4164);const t={tabItem:"tabItem_Ymn6"};var s=r(4848);function i({children:e,hidden:n,className:r}){return(0,s.jsx)("div",{role:"tabpanel",className:(0,o.A)(t.tabItem,r),hidden:n,children:e})}},1470:(e,n,r)=>{r.d(n,{A:()=>k});var o=r(6540),t=r(4164),s=r(7559),i=r(3104),a=r(6347),l=r(205),c=r(7485),d=r(1682),h=r(679);function u(e){return o.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:n,children:r}=e;return(0,o.useMemo)((()=>{const e=n??function(e){return u(e).map((({props:{value:e,label:n,attributes:r,default:o}})=>({value:e,label:n,attributes:r,default:o})))}(r);return function(e){const n=(0,d.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,r])}function m({value:e,tabValues:n}){return n.some((n=>n.value===e))}function g({queryString:e=!1,groupId:n}){const r=(0,a.W6)(),t=function({queryString:e=!1,groupId:n}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:e,groupId:n});return[(0,c.aZ)(t),(0,o.useCallback)((e=>{if(!t)return;const n=new URLSearchParams(r.location.search);n.set(t,e),r.replace({...r.location,search:n.toString()})}),[t,r])]}function f(e){const{defaultValue:n,queryString:r=!1,groupId:t}=e,s=p(e),[i,a]=(0,o.useState)((()=>function({defaultValue:e,tabValues:n}){if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:n,tabValues:s}))),[c,d]=g({queryString:r,groupId:t}),[u,f]=function({groupId:e}){const n=function(e){return e?`docusaurus.tab.${e}`:null}(e),[r,t]=(0,h.Dv)(n);return[r,(0,o.useCallback)((e=>{n&&t.set(e)}),[n,t])]}({groupId:t}),x=(()=>{const e=c??u;return m({value:e,tabValues:s})?e:null})();(0,l.A)((()=>{x&&a(x)}),[x]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);a(e),d(e),f(e)}),[d,f,s]),tabValues:s}}var x=r(2303);const j={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var v=r(4848);function y({className:e,block:n,selectedValue:r,selectValue:o,tabValues:s}){const a=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),c=e=>{const n=e.currentTarget,t=a.indexOf(n),i=s[t].value;i!==r&&(l(n),o(i))},d=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const r=a.indexOf(e.currentTarget)+1;n=a[r]??a[0];break}case"ArrowLeft":{const r=a.indexOf(e.currentTarget)-1;n=a[r]??a[a.length-1];break}}n?.focus()};return(0,v.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,t.A)("tabs",{"tabs--block":n},e),children:s.map((({value:e,label:n,attributes:o})=>(0,v.jsx)("li",{role:"tab",tabIndex:r===e?0:-1,"aria-selected":r===e,ref:e=>{a.push(e)},onKeyDown:d,onClick:c,...o,className:(0,t.A)("tabs__item",j.tabItem,o?.className,{"tabs__item--active":r===e}),children:n??e},e)))})}function b({lazy:e,children:n,selectedValue:r}){const s=(Array.isArray(n)?n:[n]).filter(Boolean);if(e){const e=s.find((e=>e.props.value===r));return e?(0,o.cloneElement)(e,{className:(0,t.A)("margin-top--md",e.props.className)}):null}return(0,v.jsx)("div",{className:"margin-top--md",children:s.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==r})))})}function w(e){const n=f(e);return(0,v.jsxs)("div",{className:(0,t.A)(s.G.tabs.container,"tabs-container",j.tabList),children:[(0,v.jsx)(y,{...n,...e}),(0,v.jsx)(b,{...n,...e})]})}function k(e){const n=(0,x.A)();return(0,v.jsx)(w,{...e,children:u(e.children)},String(n))}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var o=r(6540);const t={},s=o.createContext(t);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);