"use strict";(self.webpackChunksurge_docs=self.webpackChunksurge_docs||[]).push([[325],{3800:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>d,frontMatter:()=>s,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"about/architecture","title":"Surge Architecture","description":"Surge Architecture","source":"@site/docs/about/architecture.md","sourceDirName":"about","slug":"/about/architecture","permalink":"/docs/about/architecture","draft":false,"unlisted":false,"editUrl":"https://github.com/NethermindEth/surge/tree/main/docs/docs/about/architecture.md","tags":[],"version":"current","lastUpdatedAt":1743516923000,"sidebarPosition":4,"frontMatter":{"sidebar_position":4,"title":"Surge Architecture"},"sidebar":"tutorialSidebar","previous":{"title":"Surge & Nethermind","permalink":"/docs/about/nethermind"},"next":{"title":"Run your own Surge Devnet","permalink":"/docs/guides/running-surge/"}}');var o=n(4848),i=n(8453);const s={sidebar_position:4,title:"Surge Architecture"},c="Surge Architecture",a={},h=[{value:"Purpose of Each Component",id:"purpose-of-each-component",level:2},{value:"Components of the Taiko Stack",id:"components-of-the-taiko-stack",level:3},{value:"How Surge Differs from the Taiko Stack",id:"how-surge-differs-from-the-taiko-stack",level:2}];function l(e){const t={a:"a",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"surge-architecture",children:"Surge Architecture"})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"Surge Architecture",src:n(6954).A+"",width:"4120",height:"3224"})}),"\n",(0,o.jsx)(t.h2,{id:"purpose-of-each-component",children:"Purpose of Each Component"}),"\n",(0,o.jsx)(t.p,{children:"Surge\u2019s architecture is composed of several key components, each serving a specific function:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Nethermind Execution Client (NMC):"})," A high-performance Ethereum client that delivers Gigagas performance. ",(0,o.jsx)(t.a,{href:"https://github.com/NethermindEth/nethermind",children:"NMC Documentation"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.strong,{children:"Taiko Client:"})," Manages the consensus layer of the rollup. ",(0,o.jsx)(t.a,{href:"https://docs.taiko.xyz/taiko-alethia-protocol/protocol-architecture/taiko-alethia-nodes#consensus-layer-taiko-client",children:"Taiko Documentation"}),"."]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(t.h3,{id:"components-of-the-taiko-stack",children:"Components of the Taiko Stack"}),"\n",(0,o.jsx)(t.p,{children:"The Taiko Client consists of several sub-components:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Taiko Prover:"})," Generates state transition proofs for the rollup."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Taiko Driver:"})," Follows and monitors the rollup\u2019s state transitions."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Taiko Proposer:"})," Proposes new blocks to the rollup."]}),"\n"]}),"\n",(0,o.jsx)(t.h2,{id:"how-surge-differs-from-the-taiko-stack",children:"How Surge Differs from the Taiko Stack"}),"\n",(0,o.jsx)(t.p,{children:"Surge has customized aspects of the Taiko architecture to enhance performance and remove any reliance on new tokens:"}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Token-Free Design:"})," Surge removes token dependencies, allowing the use of Ether as a bond for block proposals."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Execution Client Upgrade:"})," Replaced TaikoGeth with the Nethermind Execution Client (NMC) to achieve better performance. ",(0,o.jsx)(t.a,{href:"https://github.com/NethermindEth/nethermind",children:"NMC Documentation"}),"."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Time-Locked Owner:"})," Modified the multisig implementation to feature a 45-day timelock, aligning with Stage 2 requirements by L2Beat."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Verification Streak Checks:"})," Owner operations via the multisig are blocked if there has been a liveness disruption of 7 days or more within the past 45 days."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"Disabled Pausing:"})," The owner cannot pause the protocol or peripheral contracts."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"2/3 Proof Verifier:"})," There are three proof systems (SGX, SP1, and Risc0). At least two of these must agree on a state transition for it to be accepted."]}),"\n",(0,o.jsxs)(t.li,{children:[(0,o.jsx)(t.strong,{children:"No Contestation Window:"})," As Surge employs a single ZK approach (no optimistic fallback), it does not require a contestation window. This design choice makes Surge a pure ZK-Rollup rather than an Optimistic Rollup."]}),"\n"]})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},6954:(e,t,n)=>{n.d(t,{A:()=>r});const r=n.p+"assets/images/Surge-Architecture-5e5e951845b187b53203161a18697bb6.svg"},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>c});var r=n(6540);const o={},i=r.createContext(o);function s(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);